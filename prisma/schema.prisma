generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model asignatura {
  id                 Int                    @id @default(autoincrement())
  nombre             String                 @unique
  matrices           MatrizEspecificacion[]
  asignatura_niveles AsignaturaNivel[]
  horarios           Horario[]
  oas                oa[]
  profesores         ProfesorAsignatura[]

  @@map("asignatura")
}

model nivel {
  id                 Int                    @id @default(autoincrement())
  nombre             String                 @unique
  matrices           MatrizEspecificacion[]
  alumnos            Alumno[]
  asignatura_niveles AsignaturaNivel[]
  horarios           Horario[]
  oas                oa[]
  profesores         ProfesorNivel[]

  @@map("nivel")
}

model AsignaturaNivel {
  id            Int        @id @default(autoincrement())
  asignatura_id Int
  nivel_id      Int
  codigo        String     @unique
  descripcion   String
  asignatura    asignatura @relation(fields: [asignatura_id], references: [id])
  nivel         nivel      @relation(fields: [nivel_id], references: [id])

  @@unique([asignatura_id, nivel_id])
  @@map("asignatura_nivel")
}

model metodologia {
  id                 Int    @id @default(autoincrement())
  nombre_metodologia String @unique
  descripcion        String
  nivel_recomendado  String
  fuentes_literatura String

  @@map("metodologia")
}

model oa {
  id              Int            @id @default(autoincrement())
  nivel_id        Int
  asignatura_id   Int
  eje_id          Int
  eje_descripcion String
  tipo_eje        String?
  oas_id          String
  descripcion_oas String
  basal           Boolean
  minimo_clases   Int
  MatrizOA        MatrizOA[]
  asignaciones    AsignacionOA[]
  asignatura      asignatura     @relation(fields: [asignatura_id], references: [id])
  nivel           nivel          @relation(fields: [nivel_id], references: [id])

  @@map("oa")
}

model MatrizEspecificacion {
  id              Int          @id @default(autoincrement())
  nombre          String
  total_preguntas Int
  asignatura_id   Int
  nivel_id        Int
  createdAt       DateTime     @default(now())
  evaluaciones    Evaluacion[]
  asignatura      asignatura   @relation(fields: [asignatura_id], references: [id])
  nivel           nivel        @relation(fields: [nivel_id], references: [id])
  oas             MatrizOA[]
}

model MatrizOA {
  id          Int                  @id @default(autoincrement())
  matrizId    Int
  oaId        Int
  indicadores Indicador[]
  matriz      MatrizEspecificacion @relation(fields: [matrizId], references: [id])
  oa          oa                   @relation(fields: [oaId], references: [id])
}

model Indicador {
  id                  Int                 @id @default(autoincrement())
  matrizOAId          Int
  descripcion         String
  preguntas           Int
  matrizOA            MatrizOA            @relation(fields: [matrizOAId], references: [id])
  preguntaIndicadores PreguntaIndicador[]
}

model Archivo {
  id           Int             @id @default(autoincrement())
  titulo       String
  tipo         String
  contenido    String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  imagenes     ArchivoImagen[]
  evaluaciones Evaluacion[]
}

model Imagen {
  id        Int             @id @default(autoincrement())
  nombre    String
  tipo      String
  data      String
  tama√±o   Int
  createdAt DateTime        @default(now())
  archivos  ArchivoImagen[]
}

model ArchivoImagen {
  id        Int      @id @default(autoincrement())
  archivoId Int
  imagenId  Int
  createdAt DateTime @default(now())
  archivo   Archivo  @relation(fields: [archivoId], references: [id])
  imagen    Imagen   @relation(fields: [imagenId], references: [id])

  @@unique([archivoId, imagenId])
}

model Profesor {
  id              Int                     @id @default(autoincrement())
  rut             String                  @unique
  nombre          String
  email           String?
  telefono        String?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  fechaNacimiento DateTime?
  horario         Horario[]
  modulos         ModuloHorarioProfesor[]
  asignaturas     ProfesorAsignatura[]
  niveles         ProfesorNivel[]

  @@map("profesor")
}

model ProfesorAsignatura {
  id           Int        @id @default(autoincrement())
  profesorId   Int
  asignaturaId Int
  asignatura   asignatura @relation(fields: [asignaturaId], references: [id])
  profesor     Profesor   @relation(fields: [profesorId], references: [id])

  @@unique([profesorId, asignaturaId], map: "sqlite_autoindex_profesor_asignatura_1")
  @@map("profesor_asignatura")
}

model ProfesorNivel {
  id         Int      @id @default(autoincrement())
  profesorId Int
  nivelId    Int
  nivel      nivel    @relation(fields: [nivelId], references: [id])
  profesor   Profesor @relation(fields: [profesorId], references: [id])

  @@unique([profesorId, nivelId], map: "sqlite_autoindex_profesor_nivel_1")
  @@map("profesor_nivel")
}

model Horario {
  id                Int                  @id @default(autoincrement())
  nombre            String
  docenteId         Int
  asignaturaId      Int
  nivelId           Int
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  fechaPrimeraClase DateTime?
  asignatura        asignatura           @relation(fields: [asignaturaId], references: [id])
  profesor          Profesor             @relation(fields: [docenteId], references: [id])
  nivel             nivel                @relation(fields: [nivelId], references: [id])
  modulos           ModuloHorario[]
  planificaciones   PlanificacionAnual[]

  @@map("horario")
}

model ModuloHorario {
  id           Int                     @id @default(autoincrement())
  horarioId    Int
  dia          String
  horaInicio   String
  duracion     Int
  orden        Int
  asignaciones AsignacionOA[]
  horario      Horario                 @relation(fields: [horarioId], references: [id])
  profesores   ModuloHorarioProfesor[]

  @@map("modulo_horario")
}

model ModuloHorarioProfesor {
  id              Int           @id @default(autoincrement())
  moduloHorarioId Int
  profesorId      Int
  rol             String
  moduloHorario   ModuloHorario @relation(fields: [moduloHorarioId], references: [id])
  profesor        Profesor      @relation(fields: [profesorId], references: [id])

  @@unique([moduloHorarioId, profesorId, rol], map: "sqlite_autoindex_modulo_horario_profesor_1")
  @@map("modulo_horario_profesor")
}

model PlanificacionAnual {
  id           Int            @id @default(autoincrement())
  nombre       String
  horarioId    Int
  ano          Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  asignaciones AsignacionOA[]
  horario      Horario        @relation(fields: [horarioId], references: [id])

  @@map("planificacion_anual")
}

model AsignacionOA {
  id              Int                 @id @default(autoincrement())
  planificacionId Int?
  moduloHorarioId Int?
  oaId            Int
  cantidadClases  Int                 @default(1)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  moduloHorario   ModuloHorario?      @relation(fields: [moduloHorarioId], references: [id])
  oa              oa                  @relation(fields: [oaId], references: [id])
  planificacion   PlanificacionAnual? @relation(fields: [planificacionId], references: [id])

  @@map("asignacion_oa")
}

model Alumno {
  id         Int               @id @default(autoincrement())
  rut        String            @unique(map: "sqlite_autoindex_alumno_1")
  nombre     String
  apellido   String
  curso      String?
  nivelId    Int?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  resultados ResultadoAlumno[]
  nivel      nivel?            @relation(fields: [nivelId], references: [id])

  @@index([nivelId])
  @@map("alumno")
}

model Alternativa {
  id         Int      @id @default(autoincrement())
  preguntaId Int
  letra      String
  texto      String
  esCorrecta Boolean  @default(false)
  pregunta   Pregunta @relation(fields: [preguntaId], references: [id])
}

model Evaluacion {
  id         Int                   @id @default(autoincrement())
  archivoId  Int
  matrizId   Int
  estado     String                @default("borrador")
  createdAt  DateTime              @default(now())
  updatedAt  DateTime
  archivo    Archivo               @relation(fields: [archivoId], references: [id])
  matriz     MatrizEspecificacion  @relation(fields: [matrizId], references: [id])
  preguntas  Pregunta[]
  resultados ResultadoEvaluacion[]
}

model Pregunta {
  id           Int                 @id @default(autoincrement())
  evaluacionId Int
  numero       Int
  texto        String
  alternativas Alternativa[]
  evaluacion   Evaluacion          @relation(fields: [evaluacionId], references: [id])
  respuestas   RespuestaAlumno[]
  indicadores  PreguntaIndicador[]
}

model PreguntaIndicador {
  id          Int       @id @default(autoincrement())
  preguntaId  Int
  indicadorId Int
  tipo        String
  indicador   Indicador @relation(fields: [indicadorId], references: [id])
  pregunta    Pregunta  @relation(fields: [preguntaId], references: [id])

  @@unique([preguntaId, indicadorId, tipo])
  @@map("pregunta_indicador")
}

model ResultadoEvaluacion {
  id           Int               @id @default(autoincrement())
  nombre       String
  evaluacionId Int
  fechaCarga   DateTime          @default(now())
  totalAlumnos Int
  escalaNota   Float             @default(7.0)
  resultados   ResultadoAlumno[]
  evaluacion   Evaluacion        @relation(fields: [evaluacionId], references: [id])

  @@index([evaluacionId])
}

model ResultadoAlumno {
  id                    Int                 @id @default(autoincrement())
  resultadoEvaluacionId Int
  alumnoId              Int
  puntajeTotal          Float
  puntajeMaximo         Float
  porcentaje            Float
  nota                  Float
  respuestas            RespuestaAlumno[]
  alumno                Alumno              @relation(fields: [alumnoId], references: [id])
  resultadoEvaluacion   ResultadoEvaluacion @relation(fields: [resultadoEvaluacionId], references: [id])

  @@index([alumnoId])
  @@index([resultadoEvaluacionId])
}

model RespuestaAlumno {
  id                Int             @id @default(autoincrement())
  resultadoAlumnoId Int
  preguntaId        Int
  alternativaDada   String
  esCorrecta        Boolean
  puntajeObtenido   Float
  pregunta          Pregunta        @relation(fields: [preguntaId], references: [id])
  resultadoAlumno   ResultadoAlumno @relation(fields: [resultadoAlumnoId], references: [id])

  @@index([preguntaId])
  @@index([resultadoAlumnoId])
}
